package com.dataflowdeveloper.hbasecoprocessor;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.Cell;
import org.apache.hadoop.hbase.CellUtil;
import org.apache.hadoop.hbase.Coprocessor;
import org.apache.hadoop.hbase.CoprocessorEnvironment;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Admin;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;
import org.apache.hadoop.hbase.client.Get;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.client.Table;
import org.apache.hadoop.hbase.client.coprocessor.Batch;
import org.apache.hadoop.hbase.coprocessor.CoprocessorException;
import org.apache.hadoop.hbase.coprocessor.CoprocessorService;
import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
import org.apache.hadoop.hbase.ipc.BlockingRpcCallback;
import org.apache.hadoop.hbase.protobuf.ResponseConverter;
import org.apache.hadoop.hbase.regionserver.InternalScanner;
import org.apache.hadoop.hbase.util.Bytes;

import com.dataflowdeveloper.hbasecoprocessor.autogenerated.Sum.SumRequest;
import com.dataflowdeveloper.hbasecoprocessor.autogenerated.Sum.SumResponse;
import com.dataflowdeveloper.hbasecoprocessor.autogenerated.Sum.SumService;
import com.google.protobuf.RpcCallback;
import com.google.protobuf.RpcController;
import com.google.protobuf.ServiceException;

// Sum

public class SumEndPoint extends SumService implements Coprocessor, CoprocessorService {

	private RegionCoprocessorEnvironment env;

	/** simple test */
	public static void main(String[] args) {
		System.out.println("Hbase tester");
		Configuration conf = HBaseConfiguration.create();
		conf.clear();
		// conf.set("hbase.zookeeper.quorum", "localhost");
		// conf.set("hbase.zookeeper.property.clientPort","2181");
		// conf.set("hbase.master", "localhost:16000");
		conf.set("hbase.zookeeper.quorum", "localhost");
		conf.set("hbase.zookeeper.property.clientport", "2181");
		conf.set("zookeeper.znode.parent", "/hbase-unsecure"); // this is what
																// most people
																// miss :)
		System.out.println("Configuration:" + conf.toString());
		Connection conn = null;
		try {
			conn = ConnectionFactory.createConnection(conf);
			System.out.println("created connection:" + conn.toString());
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		TableName tableName = TableName.valueOf("stocks");

		try {
			Admin admin = conn.getAdmin();

			if (admin.isTableAvailable(tableName)) {
				System.out.println("Table available");
			}
			else {
				System.out.println("Table not available");
			}

		} catch (		IOException e1) {
			e1.printStackTrace();
		}
		Table table = null;
		try {
			table = conn.getTable(tableName);
			
			System.out.println("Get table:" + table.getName());
			
		    Result r = table.get(new Get(Bytes.toBytes("ROW1")));
		    System.out.println(r);
		   
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		// cf:indxval
		final SumRequest request = SumRequest.newBuilder().setFamily("cf").setColumn("cf:indxval").build();
		try {
			Map<byte[], Long> results = table.coprocessorService(SumService.class, null, null,
					new Batch.Call<SumService, Long>() {
						@Override
						public Long call(SumService aggregate) throws IOException {
							BlockingRpcCallback rpcCallback = new BlockingRpcCallback();
							aggregate.getSum(null, request, rpcCallback);
							SumResponse response = (SumResponse) rpcCallback.get();
							return response.hasSum() ? response.getSum() : 0L;
						}
					});
			for (Long sum : results.values()) {
				System.out.println("Sum = " + sum);
			}
		} catch (ServiceException e) {
			e.printStackTrace();
		} catch (Throwable e) {
			e.printStackTrace();
		}
	}

	@Override
	public com.google.protobuf.Service getService() {
		return this;
	}

	@Override
	public void start(CoprocessorEnvironment env) throws IOException {
		if (env instanceof RegionCoprocessorEnvironment) {
			this.env = (RegionCoprocessorEnvironment) env;
		} else {
			throw new CoprocessorException("Must be loaded on a table region!");
		}
	}

	@Override
	public void stop(CoprocessorEnvironment env) throws IOException {
		// do nothing
	}

	@SuppressWarnings("unchecked")
	@Override
	public void getSum(RpcController controller, SumRequest request, RpcCallback done) {
		Scan scan = new Scan();
		scan.addFamily(Bytes.toBytes(request.getFamily()));
		scan.addColumn(Bytes.toBytes(request.getFamily()), Bytes.toBytes(request.getColumn()));
		SumResponse response = null;
		InternalScanner scanner = null;
		try {
			scanner = env.getRegion().getScanner(scan);
			List<Cell> results = new ArrayList<Cell>();
			boolean hasMore = false;
			long sum = 0L;
			do {
				hasMore = scanner.next(results);
				for (Cell cell : results) {
					sum = sum + Bytes.toLong(CellUtil.cloneValue(cell));
				}
				results.clear();
			} while (hasMore);

			response = SumResponse.newBuilder().setSum(sum).build();

		} catch (IOException ioe) {
			ResponseConverter.setControllerException(controller, ioe);
		} finally {
			if (scanner != null) {
				try {
					scanner.close();
				} catch (IOException ignored) {
				}
			}
		}
		done.run(response);
	}
}
